/*!Peripheral access API for R7FA6M5BH microcontrollers (generated using svd2rust v0.36.0 ( ))

You can find an overview of the generated API [here].

API features to be included in the [next] svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.

[here]: https://docs.rs/svd2rust/0.36.0/svd2rust/#peripheral-api
[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased
[repository]: https://github.com/rust-embedded/svd2rust*/
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
#![cfg_attr(docsrs, feature(doc_auto_cfg))]
///Number available in the NVIC for configuring priority
pub const NVIC_PRIO_BITS: u8 = 4;
#[allow(unused_imports)]
use generic::*;
///Common register and bit access and modify traits
pub mod generic;
#[cfg(feature = "rt")]
extern "C" {
    fn IEL0();
    fn IEL1();
    fn IEL2();
    fn IEL3();
    fn IEL4();
    fn IEL5();
    fn IEL6();
    fn IEL7();
    fn IEL8();
    fn IEL9();
    fn IEL10();
    fn IEL11();
    fn IEL12();
    fn IEL13();
    fn IEL14();
    fn IEL15();
    fn IEL16();
    fn IEL17();
    fn IEL18();
    fn IEL19();
    fn IEL20();
    fn IEL21();
    fn IEL22();
    fn IEL23();
    fn IEL24();
    fn IEL25();
    fn IEL26();
    fn IEL27();
    fn IEL28();
    fn IEL29();
    fn IEL30();
    fn IEL31();
    fn IEL32();
    fn IEL33();
    fn IEL34();
    fn IEL35();
    fn IEL36();
    fn IEL37();
    fn IEL38();
    fn IEL39();
    fn IEL40();
    fn IEL41();
    fn IEL42();
    fn IEL43();
    fn IEL44();
    fn IEL45();
    fn IEL46();
    fn IEL47();
    fn IEL48();
    fn IEL49();
    fn IEL50();
    fn IEL51();
    fn IEL52();
    fn IEL53();
    fn IEL54();
    fn IEL55();
    fn IEL56();
    fn IEL57();
    fn IEL58();
    fn IEL59();
    fn IEL60();
    fn IEL61();
    fn IEL62();
    fn IEL63();
    fn IEL64();
    fn IEL65();
    fn IEL66();
    fn IEL67();
    fn IEL68();
    fn IEL69();
    fn IEL70();
    fn IEL71();
    fn IEL72();
    fn IEL73();
    fn IEL74();
    fn IEL75();
    fn IEL76();
    fn IEL77();
    fn IEL78();
    fn IEL79();
    fn IEL80();
    fn IEL81();
    fn IEL82();
    fn IEL83();
    fn IEL84();
    fn IEL85();
    fn IEL86();
    fn IEL87();
    fn IEL88();
    fn IEL89();
    fn IEL90();
    fn IEL91();
    fn IEL92();
    fn IEL93();
    fn IEL94();
    fn IEL95();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 96] = [
    Vector { _handler: IEL0 },
    Vector { _handler: IEL1 },
    Vector { _handler: IEL2 },
    Vector { _handler: IEL3 },
    Vector { _handler: IEL4 },
    Vector { _handler: IEL5 },
    Vector { _handler: IEL6 },
    Vector { _handler: IEL7 },
    Vector { _handler: IEL8 },
    Vector { _handler: IEL9 },
    Vector { _handler: IEL10 },
    Vector { _handler: IEL11 },
    Vector { _handler: IEL12 },
    Vector { _handler: IEL13 },
    Vector { _handler: IEL14 },
    Vector { _handler: IEL15 },
    Vector { _handler: IEL16 },
    Vector { _handler: IEL17 },
    Vector { _handler: IEL18 },
    Vector { _handler: IEL19 },
    Vector { _handler: IEL20 },
    Vector { _handler: IEL21 },
    Vector { _handler: IEL22 },
    Vector { _handler: IEL23 },
    Vector { _handler: IEL24 },
    Vector { _handler: IEL25 },
    Vector { _handler: IEL26 },
    Vector { _handler: IEL27 },
    Vector { _handler: IEL28 },
    Vector { _handler: IEL29 },
    Vector { _handler: IEL30 },
    Vector { _handler: IEL31 },
    Vector { _handler: IEL32 },
    Vector { _handler: IEL33 },
    Vector { _handler: IEL34 },
    Vector { _handler: IEL35 },
    Vector { _handler: IEL36 },
    Vector { _handler: IEL37 },
    Vector { _handler: IEL38 },
    Vector { _handler: IEL39 },
    Vector { _handler: IEL40 },
    Vector { _handler: IEL41 },
    Vector { _handler: IEL42 },
    Vector { _handler: IEL43 },
    Vector { _handler: IEL44 },
    Vector { _handler: IEL45 },
    Vector { _handler: IEL46 },
    Vector { _handler: IEL47 },
    Vector { _handler: IEL48 },
    Vector { _handler: IEL49 },
    Vector { _handler: IEL50 },
    Vector { _handler: IEL51 },
    Vector { _handler: IEL52 },
    Vector { _handler: IEL53 },
    Vector { _handler: IEL54 },
    Vector { _handler: IEL55 },
    Vector { _handler: IEL56 },
    Vector { _handler: IEL57 },
    Vector { _handler: IEL58 },
    Vector { _handler: IEL59 },
    Vector { _handler: IEL60 },
    Vector { _handler: IEL61 },
    Vector { _handler: IEL62 },
    Vector { _handler: IEL63 },
    Vector { _handler: IEL64 },
    Vector { _handler: IEL65 },
    Vector { _handler: IEL66 },
    Vector { _handler: IEL67 },
    Vector { _handler: IEL68 },
    Vector { _handler: IEL69 },
    Vector { _handler: IEL70 },
    Vector { _handler: IEL71 },
    Vector { _handler: IEL72 },
    Vector { _handler: IEL73 },
    Vector { _handler: IEL74 },
    Vector { _handler: IEL75 },
    Vector { _handler: IEL76 },
    Vector { _handler: IEL77 },
    Vector { _handler: IEL78 },
    Vector { _handler: IEL79 },
    Vector { _handler: IEL80 },
    Vector { _handler: IEL81 },
    Vector { _handler: IEL82 },
    Vector { _handler: IEL83 },
    Vector { _handler: IEL84 },
    Vector { _handler: IEL85 },
    Vector { _handler: IEL86 },
    Vector { _handler: IEL87 },
    Vector { _handler: IEL88 },
    Vector { _handler: IEL89 },
    Vector { _handler: IEL90 },
    Vector { _handler: IEL91 },
    Vector { _handler: IEL92 },
    Vector { _handler: IEL93 },
    Vector { _handler: IEL94 },
    Vector { _handler: IEL95 },
];
///Enumeration of all the interrupts.
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    ///0 - ICU Interrupt 0
    IEL0 = 0,
    ///1 - ICU Interrupt 1
    IEL1 = 1,
    ///2 - ICU Interrupt 2
    IEL2 = 2,
    ///3 - ICU Interrupt 3
    IEL3 = 3,
    ///4 - ICU Interrupt 4
    IEL4 = 4,
    ///5 - ICU Interrupt 5
    IEL5 = 5,
    ///6 - ICU Interrupt 6
    IEL6 = 6,
    ///7 - ICU Interrupt 7
    IEL7 = 7,
    ///8 - ICU Interrupt 8
    IEL8 = 8,
    ///9 - ICU Interrupt 9
    IEL9 = 9,
    ///10 - ICU Interrupt 10
    IEL10 = 10,
    ///11 - ICU Interrupt 11
    IEL11 = 11,
    ///12 - ICU Interrupt 12
    IEL12 = 12,
    ///13 - ICU Interrupt 13
    IEL13 = 13,
    ///14 - ICU Interrupt 14
    IEL14 = 14,
    ///15 - ICU Interrupt 15
    IEL15 = 15,
    ///16 - ICU Interrupt 16
    IEL16 = 16,
    ///17 - ICU Interrupt 17
    IEL17 = 17,
    ///18 - ICU Interrupt 18
    IEL18 = 18,
    ///19 - ICU Interrupt 19
    IEL19 = 19,
    ///20 - ICU Interrupt 20
    IEL20 = 20,
    ///21 - ICU Interrupt 21
    IEL21 = 21,
    ///22 - ICU Interrupt 22
    IEL22 = 22,
    ///23 - ICU Interrupt 23
    IEL23 = 23,
    ///24 - ICU Interrupt 24
    IEL24 = 24,
    ///25 - ICU Interrupt 25
    IEL25 = 25,
    ///26 - ICU Interrupt 26
    IEL26 = 26,
    ///27 - ICU Interrupt 27
    IEL27 = 27,
    ///28 - ICU Interrupt 28
    IEL28 = 28,
    ///29 - ICU Interrupt 29
    IEL29 = 29,
    ///30 - ICU Interrupt 30
    IEL30 = 30,
    ///31 - ICU Interrupt 31
    IEL31 = 31,
    ///32 - ICU Interrupt 32
    IEL32 = 32,
    ///33 - ICU Interrupt 33
    IEL33 = 33,
    ///34 - ICU Interrupt 34
    IEL34 = 34,
    ///35 - ICU Interrupt 35
    IEL35 = 35,
    ///36 - ICU Interrupt 36
    IEL36 = 36,
    ///37 - ICU Interrupt 37
    IEL37 = 37,
    ///38 - ICU Interrupt 38
    IEL38 = 38,
    ///39 - ICU Interrupt 39
    IEL39 = 39,
    ///40 - ICU Interrupt 40
    IEL40 = 40,
    ///41 - ICU Interrupt 41
    IEL41 = 41,
    ///42 - ICU Interrupt 42
    IEL42 = 42,
    ///43 - ICU Interrupt 43
    IEL43 = 43,
    ///44 - ICU Interrupt 44
    IEL44 = 44,
    ///45 - ICU Interrupt 45
    IEL45 = 45,
    ///46 - ICU Interrupt 46
    IEL46 = 46,
    ///47 - ICU Interrupt 47
    IEL47 = 47,
    ///48 - ICU Interrupt 48
    IEL48 = 48,
    ///49 - ICU Interrupt 49
    IEL49 = 49,
    ///50 - ICU Interrupt 50
    IEL50 = 50,
    ///51 - ICU Interrupt 51
    IEL51 = 51,
    ///52 - ICU Interrupt 52
    IEL52 = 52,
    ///53 - ICU Interrupt 53
    IEL53 = 53,
    ///54 - ICU Interrupt 54
    IEL54 = 54,
    ///55 - ICU Interrupt 55
    IEL55 = 55,
    ///56 - ICU Interrupt 56
    IEL56 = 56,
    ///57 - ICU Interrupt 57
    IEL57 = 57,
    ///58 - ICU Interrupt 58
    IEL58 = 58,
    ///59 - ICU Interrupt 59
    IEL59 = 59,
    ///60 - ICU Interrupt 60
    IEL60 = 60,
    ///61 - ICU Interrupt 61
    IEL61 = 61,
    ///62 - ICU Interrupt 62
    IEL62 = 62,
    ///63 - ICU Interrupt 63
    IEL63 = 63,
    ///64 - ICU Interrupt 64
    IEL64 = 64,
    ///65 - ICU Interrupt 65
    IEL65 = 65,
    ///66 - ICU Interrupt 66
    IEL66 = 66,
    ///67 - ICU Interrupt 67
    IEL67 = 67,
    ///68 - ICU Interrupt 68
    IEL68 = 68,
    ///69 - ICU Interrupt 69
    IEL69 = 69,
    ///70 - ICU Interrupt 70
    IEL70 = 70,
    ///71 - ICU Interrupt 71
    IEL71 = 71,
    ///72 - ICU Interrupt 72
    IEL72 = 72,
    ///73 - ICU Interrupt 73
    IEL73 = 73,
    ///74 - ICU Interrupt 74
    IEL74 = 74,
    ///75 - ICU Interrupt 75
    IEL75 = 75,
    ///76 - ICU Interrupt 76
    IEL76 = 76,
    ///77 - ICU Interrupt 77
    IEL77 = 77,
    ///78 - ICU Interrupt 78
    IEL78 = 78,
    ///79 - ICU Interrupt 79
    IEL79 = 79,
    ///80 - ICU Interrupt 80
    IEL80 = 80,
    ///81 - ICU Interrupt 81
    IEL81 = 81,
    ///82 - ICU Interrupt 82
    IEL82 = 82,
    ///83 - ICU Interrupt 83
    IEL83 = 83,
    ///84 - ICU Interrupt 84
    IEL84 = 84,
    ///85 - ICU Interrupt 85
    IEL85 = 85,
    ///86 - ICU Interrupt 86
    IEL86 = 86,
    ///87 - ICU Interrupt 87
    IEL87 = 87,
    ///88 - ICU Interrupt 88
    IEL88 = 88,
    ///89 - ICU Interrupt 89
    IEL89 = 89,
    ///90 - ICU Interrupt 90
    IEL90 = 90,
    ///91 - ICU Interrupt 91
    IEL91 = 91,
    ///92 - ICU Interrupt 92
    IEL92 = 92,
    ///93 - ICU Interrupt 93
    IEL93 = 93,
    ///94 - ICU Interrupt 94
    IEL94 = 94,
    ///95 - ICU Interrupt 95
    IEL95 = 95,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
///Renesas Memory Protection Unit
pub type Rmpu = crate::Periph<rmpu::RegisterBlock, 0x4000_0000>;
impl core::fmt::Debug for Rmpu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rmpu").finish()
    }
}
///Renesas Memory Protection Unit
pub mod rmpu;
///TrustZone Filter
pub type Tzf = crate::Periph<tzf::RegisterBlock, 0x4000_0e00>;
impl core::fmt::Debug for Tzf {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tzf").finish()
    }
}
///TrustZone Filter
pub mod tzf;
///SRAM Control
pub type Sram = crate::Periph<sram::RegisterBlock, 0x4000_2000>;
impl core::fmt::Debug for Sram {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sram").finish()
    }
}
///SRAM Control
pub mod sram;
///Bus Control
pub type Bus = crate::Periph<bus::RegisterBlock, 0x4000_3000>;
impl core::fmt::Debug for Bus {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Bus").finish()
    }
}
///Bus Control
pub mod bus;
///Direct memory access controller 0
pub type Dmac0 = crate::Periph<dmac0::RegisterBlock, 0x4000_5000>;
impl core::fmt::Debug for Dmac0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dmac0").finish()
    }
}
///Direct memory access controller 0
pub mod dmac0;
///Direct memory access controller 1
pub type Dmac1 = crate::Periph<dmac0::RegisterBlock, 0x4000_5040>;
impl core::fmt::Debug for Dmac1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dmac1").finish()
    }
}
///Direct memory access controller 1
pub use self::dmac0 as dmac1;
///Direct memory access controller 2
pub type Dmac2 = crate::Periph<dmac0::RegisterBlock, 0x4000_5080>;
impl core::fmt::Debug for Dmac2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dmac2").finish()
    }
}
///Direct memory access controller 2
pub use self::dmac0 as dmac2;
///Direct memory access controller 3
pub type Dmac3 = crate::Periph<dmac0::RegisterBlock, 0x4000_50c0>;
impl core::fmt::Debug for Dmac3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dmac3").finish()
    }
}
///Direct memory access controller 3
pub use self::dmac0 as dmac3;
///Direct memory access controller 4
pub type Dmac4 = crate::Periph<dmac0::RegisterBlock, 0x4000_5100>;
impl core::fmt::Debug for Dmac4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dmac4").finish()
    }
}
///Direct memory access controller 4
pub use self::dmac0 as dmac4;
///Direct memory access controller 5
pub type Dmac5 = crate::Periph<dmac0::RegisterBlock, 0x4000_5140>;
impl core::fmt::Debug for Dmac5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dmac5").finish()
    }
}
///Direct memory access controller 5
pub use self::dmac0 as dmac5;
///Direct memory access controller 6
pub type Dmac6 = crate::Periph<dmac0::RegisterBlock, 0x4000_5180>;
impl core::fmt::Debug for Dmac6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dmac6").finish()
    }
}
///Direct memory access controller 6
pub use self::dmac0 as dmac6;
///Direct memory access controller 7
pub type Dmac7 = crate::Periph<dmac0::RegisterBlock, 0x4000_51c0>;
impl core::fmt::Debug for Dmac7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dmac7").finish()
    }
}
///Direct memory access controller 7
pub use self::dmac0 as dmac7;
///DMAC Module Activation
pub type Dma = crate::Periph<dma::RegisterBlock, 0x4000_5200>;
impl core::fmt::Debug for Dma {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma").finish()
    }
}
///DMAC Module Activation
pub mod dma;
///Data Transfer Controller
pub type Dtc = crate::Periph<dtc::RegisterBlock, 0x4000_5400>;
impl core::fmt::Debug for Dtc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dtc").finish()
    }
}
///Data Transfer Controller
pub mod dtc;
///Interrupt Controller
pub type Icu = crate::Periph<icu::RegisterBlock, 0x4000_6000>;
impl core::fmt::Debug for Icu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Icu").finish()
    }
}
///Interrupt Controller
pub mod icu;
///CACHE
pub type Cache = crate::Periph<cache::RegisterBlock, 0x4000_7000>;
impl core::fmt::Debug for Cache {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Cache").finish()
    }
}
///CACHE
pub mod cache;
///CPU System Security Control Unit
pub type Cpscu = crate::Periph<cpscu::RegisterBlock, 0x4000_8000>;
impl core::fmt::Debug for Cpscu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Cpscu").finish()
    }
}
///CPU System Security Control Unit
pub mod cpscu;
///Debug Function
pub type Dbg = crate::Periph<dbg::RegisterBlock, 0x4001_b000>;
impl core::fmt::Debug for Dbg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dbg").finish()
    }
}
///Debug Function
pub mod dbg;
///SYSTEM/FLASH
pub type Fcache = crate::Periph<fcache::RegisterBlock, 0x4001_c100>;
impl core::fmt::Debug for Fcache {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Fcache").finish()
    }
}
///SYSTEM/FLASH
pub mod fcache;
///System Control
pub type Sysc = crate::Periph<sysc::RegisterBlock, 0x4001_e000>;
impl core::fmt::Debug for Sysc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sysc").finish()
    }
}
///System Control
pub mod sysc;
///Pmn Pin FunctionPort 0 Control RegistersPmn Pin Function Control Register
pub type Port0 = crate::Periph<port0::RegisterBlock, 0x4008_0000>;
impl core::fmt::Debug for Port0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Port0").finish()
    }
}
///Pmn Pin FunctionPort 0 Control RegistersPmn Pin Function Control Register
pub mod port0;
///Pmn Pin FunctionPort 1 Control RegistersPmn Pin Function Control Register
pub type Port1 = crate::Periph<port1::RegisterBlock, 0x4008_0020>;
impl core::fmt::Debug for Port1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Port1").finish()
    }
}
///Pmn Pin FunctionPort 1 Control RegistersPmn Pin Function Control Register
pub mod port1;
///Pmn Pin FunctionPort 2 Control RegistersPmn Pin Function Control Register
pub type Port2 = crate::Periph<port1::RegisterBlock, 0x4008_0040>;
impl core::fmt::Debug for Port2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Port2").finish()
    }
}
///Pmn Pin FunctionPort 2 Control RegistersPmn Pin Function Control Register
pub use self::port1 as port2;
///Pmn Pin FunctionPort 3 Control RegistersPmn Pin Function Control Register
pub type Port3 = crate::Periph<port1::RegisterBlock, 0x4008_0060>;
impl core::fmt::Debug for Port3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Port3").finish()
    }
}
///Pmn Pin FunctionPort 3 Control RegistersPmn Pin Function Control Register
pub use self::port1 as port3;
///Pmn Pin FunctionPort 4 Control RegistersPmn Pin Function Control Register
pub type Port4 = crate::Periph<port1::RegisterBlock, 0x4008_0080>;
impl core::fmt::Debug for Port4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Port4").finish()
    }
}
///Pmn Pin FunctionPort 4 Control RegistersPmn Pin Function Control Register
pub use self::port1 as port4;
///Pmn Pin FunctionPort 5 Control RegistersPmn Pin Function Control Register
pub type Port5 = crate::Periph<port0::RegisterBlock, 0x4008_00a0>;
impl core::fmt::Debug for Port5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Port5").finish()
    }
}
///Pmn Pin FunctionPort 5 Control RegistersPmn Pin Function Control Register
pub use self::port0 as port5;
///Pmn Pin FunctionPort 6 Control RegistersPmn Pin Function Control Register
pub type Port6 = crate::Periph<port0::RegisterBlock, 0x4008_00c0>;
impl core::fmt::Debug for Port6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Port6").finish()
    }
}
///Pmn Pin FunctionPort 6 Control RegistersPmn Pin Function Control Register
pub use self::port0 as port6;
///Pmn Pin FunctionPort 7 Control RegistersPmn Pin Function Control Register
pub type Port7 = crate::Periph<port0::RegisterBlock, 0x4008_00e0>;
impl core::fmt::Debug for Port7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Port7").finish()
    }
}
///Pmn Pin FunctionPort 7 Control RegistersPmn Pin Function Control Register
pub use self::port0 as port7;
///Pmn Pin FunctionPort 8 Control RegistersPmn Pin Function Control Register
pub type Port8 = crate::Periph<port0::RegisterBlock, 0x4008_0100>;
impl core::fmt::Debug for Port8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Port8").finish()
    }
}
///Pmn Pin FunctionPort 8 Control RegistersPmn Pin Function Control Register
pub use self::port0 as port8;
///Pmn Pin FunctionPort 9 Control RegistersPmn Pin Function Control Register
pub type Port9 = crate::Periph<port0::RegisterBlock, 0x4008_0120>;
impl core::fmt::Debug for Port9 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Port9").finish()
    }
}
///Pmn Pin FunctionPort 9 Control RegistersPmn Pin Function Control Register
pub use self::port0 as port9;
///Pmn Pin FunctionPort A Control RegistersPmn Pin Function Control Register
pub type Porta = crate::Periph<porta::RegisterBlock, 0x4008_0140>;
impl core::fmt::Debug for Porta {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Porta").finish()
    }
}
///Pmn Pin FunctionPort A Control RegistersPmn Pin Function Control Register
pub mod porta;
///Pmn Pin FunctionPort B Control RegistersPmn Pin Function Control Register
pub type Portb = crate::Periph<portb::RegisterBlock, 0x4008_0160>;
impl core::fmt::Debug for Portb {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Portb").finish()
    }
}
///Pmn Pin FunctionPort B Control RegistersPmn Pin Function Control Register
pub mod portb;
///Control Register
pub type Pfs = crate::Periph<pfs::RegisterBlock, 0x4008_0800>;
impl core::fmt::Debug for Pfs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pfs").finish()
    }
}
///Control Register
pub mod pfs;
///Event Link Controller
pub type Elc = crate::Periph<elc::RegisterBlock, 0x4008_2000>;
impl core::fmt::Debug for Elc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Elc").finish()
    }
}
///Event Link Controller
pub mod elc;
///Realtime Clock
pub type Rtc = crate::Periph<rtc::RegisterBlock, 0x4008_3000>;
impl core::fmt::Debug for Rtc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rtc").finish()
    }
}
///Realtime Clock
pub mod rtc;
///Independent Watchdog Timer
pub type Iwdt = crate::Periph<iwdt::RegisterBlock, 0x4008_3200>;
impl core::fmt::Debug for Iwdt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Iwdt").finish()
    }
}
///Independent Watchdog Timer
pub mod iwdt;
///Watchdog Timer
pub type Wdt = crate::Periph<wdt::RegisterBlock, 0x4008_3400>;
impl core::fmt::Debug for Wdt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wdt").finish()
    }
}
///Watchdog Timer
pub mod wdt;
///Clock Frequency Accuracy Measurement Circuit
pub type Cac = crate::Periph<cac::RegisterBlock, 0x4008_3600>;
impl core::fmt::Debug for Cac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Cac").finish()
    }
}
///Clock Frequency Accuracy Measurement Circuit
pub mod cac;
///Module Stop Control
pub type Mstp = crate::Periph<mstp::RegisterBlock, 0x4008_4000>;
impl core::fmt::Debug for Mstp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Mstp").finish()
    }
}
///Module Stop Control
pub mod mstp;
///Port Output Enable Module for GPT
pub type Poeg = crate::Periph<poeg::RegisterBlock, 0x4008_a000>;
impl core::fmt::Debug for Poeg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Poeg").finish()
    }
}
///Port Output Enable Module for GPT
pub mod poeg;
///USB 2.0 Full-Speed Module
pub type Usbfs = crate::Periph<usbfs::RegisterBlock, 0x4009_0000>;
impl core::fmt::Debug for Usbfs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usbfs").finish()
    }
}
///USB 2.0 Full-Speed Module
pub mod usbfs;
///SD Host Interface 0
pub type Sdhi0 = crate::Periph<sdhi0::RegisterBlock, 0x4009_2000>;
impl core::fmt::Debug for Sdhi0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sdhi0").finish()
    }
}
///SD Host Interface 0
pub mod sdhi0;
///Serial Sound Interface Enhanced (SSIE)
pub type Ssie0 = crate::Periph<ssie0::RegisterBlock, 0x4009_d000>;
impl core::fmt::Debug for Ssie0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ssie0").finish()
    }
}
///Serial Sound Interface Enhanced (SSIE)
pub mod ssie0;
///Inter-Integrated Circuit 0
pub type Iic0 = crate::Periph<iic0::RegisterBlock, 0x4009_f000>;
impl core::fmt::Debug for Iic0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Iic0").finish()
    }
}
///Inter-Integrated Circuit 0
pub mod iic0;
///Inter-Integrated Circuit 0 Wake-up Unit
pub type Iic0wu = crate::Periph<iic0wu::RegisterBlock, 0x4009_f014>;
impl core::fmt::Debug for Iic0wu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Iic0wu").finish()
    }
}
///Inter-Integrated Circuit 0 Wake-up Unit
pub mod iic0wu;
///Inter-Integrated Circuit 1
pub type Iic1 = crate::Periph<iic0::RegisterBlock, 0x4009_f100>;
impl core::fmt::Debug for Iic1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Iic1").finish()
    }
}
///Inter-Integrated Circuit 1
pub use self::iic0 as iic1;
///Inter-Integrated Circuit 2
pub type Iic2 = crate::Periph<iic0::RegisterBlock, 0x4009_f200>;
impl core::fmt::Debug for Iic2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Iic2").finish()
    }
}
///Inter-Integrated Circuit 2
pub use self::iic0 as iic2;
///Octa Serial Peripheral Interface
pub type Ospi = crate::Periph<ospi::RegisterBlock, 0x400a_6000>;
impl core::fmt::Debug for Ospi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ospi").finish()
    }
}
///Octa Serial Peripheral Interface
pub mod ospi;
///Consumer Electronics Control
pub type Cec = crate::Periph<cec::RegisterBlock, 0x400a_c000>;
impl core::fmt::Debug for Cec {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Cec").finish()
    }
}
///Consumer Electronics Control
pub mod cec;
///CANFD
pub type Canfd = crate::Periph<canfd::RegisterBlock, 0x400b_0000>;
impl core::fmt::Debug for Canfd {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Canfd").finish()
    }
}
///CANFD
pub mod canfd;
///Capacitive Touch Sensing Unit
pub type Ctsu = crate::Periph<ctsu::RegisterBlock, 0x400d_0000>;
impl core::fmt::Debug for Ctsu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Ctsu").finish()
    }
}
///Capacitive Touch Sensing Unit
pub mod ctsu;
///Peripheral Security Control Unit
pub type Pscu = crate::Periph<pscu::RegisterBlock, 0x400e_0000>;
impl core::fmt::Debug for Pscu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pscu").finish()
    }
}
///Peripheral Security Control Unit
pub mod pscu;
///Low Power Asynchronous General Purpose Timer 0
pub type Agt0 = crate::Periph<agt0::RegisterBlock, 0x400e_8000>;
impl core::fmt::Debug for Agt0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Agt0").finish()
    }
}
///Low Power Asynchronous General Purpose Timer 0
pub mod agt0;
///Low Power Asynchronous General Purpose Timer 1
pub type Agt1 = crate::Periph<agt0::RegisterBlock, 0x400e_8100>;
impl core::fmt::Debug for Agt1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Agt1").finish()
    }
}
///Low Power Asynchronous General Purpose Timer 1
pub use self::agt0 as agt1;
///Low Power Asynchronous General Purpose Timer 2
pub type Agt2 = crate::Periph<agt0::RegisterBlock, 0x400e_8200>;
impl core::fmt::Debug for Agt2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Agt2").finish()
    }
}
///Low Power Asynchronous General Purpose Timer 2
pub use self::agt0 as agt2;
///Low Power Asynchronous General Purpose Timer 3
pub type Agt3 = crate::Periph<agt0::RegisterBlock, 0x400e_8300>;
impl core::fmt::Debug for Agt3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Agt3").finish()
    }
}
///Low Power Asynchronous General Purpose Timer 3
pub use self::agt0 as agt3;
///Low Power Asynchronous General Purpose Timer 4
pub type Agt4 = crate::Periph<agt0::RegisterBlock, 0x400e_8400>;
impl core::fmt::Debug for Agt4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Agt4").finish()
    }
}
///Low Power Asynchronous General Purpose Timer 4
pub use self::agt0 as agt4;
///Low Power Asynchronous General Purpose Timer 5
pub type Agt5 = crate::Periph<agt0::RegisterBlock, 0x400e_8500>;
impl core::fmt::Debug for Agt5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Agt5").finish()
    }
}
///Low Power Asynchronous General Purpose Timer 5
pub use self::agt0 as agt5;
///Temperature Sensor
pub type Tsn = crate::Periph<tsn::RegisterBlock, 0x400f_3000>;
impl core::fmt::Debug for Tsn {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tsn").finish()
    }
}
///Temperature Sensor
pub mod tsn;
///Cyclic Redundancy Check Calculator
pub type Crc = crate::Periph<crc::RegisterBlock, 0x4010_8000>;
impl core::fmt::Debug for Crc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Crc").finish()
    }
}
///Cyclic Redundancy Check Calculator
pub mod crc;
///Data Operation Circuit
pub type Doc = crate::Periph<doc::RegisterBlock, 0x4010_9000>;
impl core::fmt::Debug for Doc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Doc").finish()
    }
}
///Data Operation Circuit
pub mod doc;
///USB 2.0 High-Speed Module
pub type Usbhs = crate::Periph<usbhs::RegisterBlock, 0x4011_1000>;
impl core::fmt::Debug for Usbhs {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usbhs").finish()
    }
}
///USB 2.0 High-Speed Module
pub mod usbhs;
///DMA Controller for the Ethernet Controller Channel 0
pub type Edmac0 = crate::Periph<edmac0::RegisterBlock, 0x4011_4000>;
impl core::fmt::Debug for Edmac0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Edmac0").finish()
    }
}
///DMA Controller for the Ethernet Controller Channel 0
pub mod edmac0;
///Ethernet Controller Channel 0
pub type Etherc0 = crate::Periph<etherc0::RegisterBlock, 0x4011_4100>;
impl core::fmt::Debug for Etherc0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Etherc0").finish()
    }
}
///Ethernet Controller Channel 0
pub mod etherc0;
///Serial Communication Interface
pub type Sci0 = crate::Periph<sci0::RegisterBlock, 0x4011_8000>;
impl core::fmt::Debug for Sci0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sci0").finish()
    }
}
///Serial Communication Interface
pub mod sci0;
///Serial Communication Interface 0
pub type Sci1 = crate::Periph<sci1::RegisterBlock, 0x4011_8100>;
impl core::fmt::Debug for Sci1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sci1").finish()
    }
}
///Serial Communication Interface 0
pub mod sci1;
///Serial Communication Interface 0
pub type Sci2 = crate::Periph<sci1::RegisterBlock, 0x4011_8200>;
impl core::fmt::Debug for Sci2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sci2").finish()
    }
}
///Serial Communication Interface 0
pub use self::sci1 as sci2;
///Serial Communication Interface
pub type Sci3 = crate::Periph<sci3::RegisterBlock, 0x4011_8300>;
impl core::fmt::Debug for Sci3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sci3").finish()
    }
}
///Serial Communication Interface
pub mod sci3;
///Serial Communication Interface
pub type Sci4 = crate::Periph<sci3::RegisterBlock, 0x4011_8400>;
impl core::fmt::Debug for Sci4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sci4").finish()
    }
}
///Serial Communication Interface
pub use self::sci3 as sci4;
///Serial Communication Interface
pub type Sci5 = crate::Periph<sci0::RegisterBlock, 0x4011_8500>;
impl core::fmt::Debug for Sci5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sci5").finish()
    }
}
///Serial Communication Interface
pub use self::sci0 as sci5;
///Serial Communication Interface
pub type Sci6 = crate::Periph<sci0::RegisterBlock, 0x4011_8600>;
impl core::fmt::Debug for Sci6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sci6").finish()
    }
}
///Serial Communication Interface
pub use self::sci0 as sci6;
///Serial Communication Interface
pub type Sci7 = crate::Periph<sci0::RegisterBlock, 0x4011_8700>;
impl core::fmt::Debug for Sci7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sci7").finish()
    }
}
///Serial Communication Interface
pub use self::sci0 as sci7;
///Serial Communication Interface
pub type Sci8 = crate::Periph<sci0::RegisterBlock, 0x4011_8800>;
impl core::fmt::Debug for Sci8 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sci8").finish()
    }
}
///Serial Communication Interface
pub use self::sci0 as sci8;
///Serial Communication Interface
pub type Sci9 = crate::Periph<sci0::RegisterBlock, 0x4011_8900>;
impl core::fmt::Debug for Sci9 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sci9").finish()
    }
}
///Serial Communication Interface
pub use self::sci0 as sci9;
///Serial Peripheral Interface 0
pub type Spi0 = crate::Periph<spi0::RegisterBlock, 0x4011_a000>;
impl core::fmt::Debug for Spi0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi0").finish()
    }
}
///Serial Peripheral Interface 0
pub mod spi0;
///Serial Peripheral Interface 1
pub type Spi1 = crate::Periph<spi0::RegisterBlock, 0x4011_a100>;
impl core::fmt::Debug for Spi1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi1").finish()
    }
}
///Serial Peripheral Interface 1
pub use self::spi0 as spi1;
///ECCAFL
pub type Eccafl0 = crate::Periph<eccafl0::RegisterBlock, 0x4012_f000>;
impl core::fmt::Debug for Eccafl0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Eccafl0").finish()
    }
}
///ECCAFL
pub mod eccafl0;
///ECCAFL
pub type Eccafl1 = crate::Periph<eccafl0::RegisterBlock, 0x4012_f100>;
impl core::fmt::Debug for Eccafl1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Eccafl1").finish()
    }
}
///ECCAFL
pub use self::eccafl0 as eccafl1;
///ECCMB
pub type Eccmb = crate::Periph<eccmb::RegisterBlock, 0x4012_f200>;
impl core::fmt::Debug for Eccmb {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Eccmb").finish()
    }
}
///ECCMB
pub mod eccmb;
///General PWM 32-bit Timer 0
pub type Gpt320 = crate::Periph<gpt320::RegisterBlock, 0x4016_9000>;
impl core::fmt::Debug for Gpt320 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpt320").finish()
    }
}
///General PWM 32-bit Timer 0
pub mod gpt320;
///General PWM 32-bit Timer 1
pub type Gpt321 = crate::Periph<gpt320::RegisterBlock, 0x4016_9100>;
impl core::fmt::Debug for Gpt321 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpt321").finish()
    }
}
///General PWM 32-bit Timer 1
pub use self::gpt320 as gpt321;
///General PWM 32-bit Timer 2
pub type Gpt322 = crate::Periph<gpt320::RegisterBlock, 0x4016_9200>;
impl core::fmt::Debug for Gpt322 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpt322").finish()
    }
}
///General PWM 32-bit Timer 2
pub use self::gpt320 as gpt322;
///General PWM 32-bit Timer 3
pub type Gpt323 = crate::Periph<gpt320::RegisterBlock, 0x4016_9300>;
impl core::fmt::Debug for Gpt323 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpt323").finish()
    }
}
///General PWM 32-bit Timer 3
pub use self::gpt320 as gpt323;
///General PWM 16-bit Timer 4
pub type Gpt164 = crate::Periph<gpt164::RegisterBlock, 0x4016_9400>;
impl core::fmt::Debug for Gpt164 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpt164").finish()
    }
}
///General PWM 16-bit Timer 4
pub mod gpt164;
///General PWM 16-bit Timer 5
pub type Gpt165 = crate::Periph<gpt164::RegisterBlock, 0x4016_9500>;
impl core::fmt::Debug for Gpt165 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpt165").finish()
    }
}
///General PWM 16-bit Timer 5
pub use self::gpt164 as gpt165;
///General PWM 16-bit Timer 6
pub type Gpt166 = crate::Periph<gpt164::RegisterBlock, 0x4016_9600>;
impl core::fmt::Debug for Gpt166 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpt166").finish()
    }
}
///General PWM 16-bit Timer 6
pub use self::gpt164 as gpt166;
///General PWM 16-bit Timer 7
pub type Gpt167 = crate::Periph<gpt164::RegisterBlock, 0x4016_9700>;
impl core::fmt::Debug for Gpt167 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpt167").finish()
    }
}
///General PWM 16-bit Timer 7
pub use self::gpt164 as gpt167;
///General PWM 16-bit Timer 8
pub type Gpt168 = crate::Periph<gpt164::RegisterBlock, 0x4016_9800>;
impl core::fmt::Debug for Gpt168 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpt168").finish()
    }
}
///General PWM 16-bit Timer 8
pub use self::gpt164 as gpt168;
///General PWM 16-bit Timer 9
pub type Gpt169 = crate::Periph<gpt164::RegisterBlock, 0x4016_9900>;
impl core::fmt::Debug for Gpt169 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpt169").finish()
    }
}
///General PWM 16-bit Timer 9
pub use self::gpt164 as gpt169;
///Output Phase Switching Controller
pub type GptOps = crate::Periph<gpt_ops::RegisterBlock, 0x4016_9a00>;
impl core::fmt::Debug for GptOps {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("GptOps").finish()
    }
}
///Output Phase Switching Controller
pub mod gpt_ops;
///12-bit A/D Converter
pub type Adc120 = crate::Periph<adc120::RegisterBlock, 0x4017_0000>;
impl core::fmt::Debug for Adc120 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc120").finish()
    }
}
///12-bit A/D Converter
pub mod adc120;
///12-bit A/D Converter
pub type Adc121 = crate::Periph<adc121::RegisterBlock, 0x4017_0200>;
impl core::fmt::Debug for Adc121 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc121").finish()
    }
}
///12-bit A/D Converter
pub mod adc121;
///12-bit D/A converter
pub type Dac12 = crate::Periph<dac12::RegisterBlock, 0x4017_1000>;
impl core::fmt::Debug for Dac12 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dac12").finish()
    }
}
///12-bit D/A converter
pub mod dac12;
///Temperature Sensor Calibration Data
pub type Tsd = crate::Periph<tsd::RegisterBlock, 0x407f_b000>;
impl core::fmt::Debug for Tsd {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Tsd").finish()
    }
}
///Temperature Sensor Calibration Data
pub mod tsd;
///Data Flash
pub type Flad = crate::Periph<flad::RegisterBlock, 0x407f_c000>;
impl core::fmt::Debug for Flad {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Flad").finish()
    }
}
///Data Flash
pub mod flad;
///Flash/CPU Interface
pub type Faci = crate::Periph<faci::RegisterBlock, 0x407f_e000>;
impl core::fmt::Debug for Faci {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Faci").finish()
    }
}
///Flash/CPU Interface
pub mod faci;
///Quad Serial Peripheral Interface
pub type Qspi = crate::Periph<qspi::RegisterBlock, 0x6400_0000>;
impl core::fmt::Debug for Qspi {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Qspi").finish()
    }
}
///Quad Serial Peripheral Interface
pub mod qspi;
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
/// All the peripherals.
#[allow(non_snake_case)]
pub struct Peripherals {
    ///RMPU
    pub rmpu: Rmpu,
    ///TZF
    pub tzf: Tzf,
    ///SRAM
    pub sram: Sram,
    ///BUS
    pub bus: Bus,
    ///DMAC0
    pub dmac0: Dmac0,
    ///DMAC1
    pub dmac1: Dmac1,
    ///DMAC2
    pub dmac2: Dmac2,
    ///DMAC3
    pub dmac3: Dmac3,
    ///DMAC4
    pub dmac4: Dmac4,
    ///DMAC5
    pub dmac5: Dmac5,
    ///DMAC6
    pub dmac6: Dmac6,
    ///DMAC7
    pub dmac7: Dmac7,
    ///DMA
    pub dma: Dma,
    ///DTC
    pub dtc: Dtc,
    ///ICU
    pub icu: Icu,
    ///CACHE
    pub cache: Cache,
    ///CPSCU
    pub cpscu: Cpscu,
    ///DBG
    pub dbg: Dbg,
    ///FCACHE
    pub fcache: Fcache,
    ///SYSC
    pub sysc: Sysc,
    ///PORT0
    pub port0: Port0,
    ///PORT1
    pub port1: Port1,
    ///PORT2
    pub port2: Port2,
    ///PORT3
    pub port3: Port3,
    ///PORT4
    pub port4: Port4,
    ///PORT5
    pub port5: Port5,
    ///PORT6
    pub port6: Port6,
    ///PORT7
    pub port7: Port7,
    ///PORT8
    pub port8: Port8,
    ///PORT9
    pub port9: Port9,
    ///PORTA
    pub porta: Porta,
    ///PORTB
    pub portb: Portb,
    ///PFS
    pub pfs: Pfs,
    ///ELC
    pub elc: Elc,
    ///RTC
    pub rtc: Rtc,
    ///IWDT
    pub iwdt: Iwdt,
    ///WDT
    pub wdt: Wdt,
    ///CAC
    pub cac: Cac,
    ///MSTP
    pub mstp: Mstp,
    ///POEG
    pub poeg: Poeg,
    ///USBFS
    pub usbfs: Usbfs,
    ///SDHI0
    pub sdhi0: Sdhi0,
    ///SSIE0
    pub ssie0: Ssie0,
    ///IIC0
    pub iic0: Iic0,
    ///IIC0WU
    pub iic0wu: Iic0wu,
    ///IIC1
    pub iic1: Iic1,
    ///IIC2
    pub iic2: Iic2,
    ///OSPI
    pub ospi: Ospi,
    ///CEC
    pub cec: Cec,
    ///CANFD
    pub canfd: Canfd,
    ///CTSU
    pub ctsu: Ctsu,
    ///PSCU
    pub pscu: Pscu,
    ///AGT0
    pub agt0: Agt0,
    ///AGT1
    pub agt1: Agt1,
    ///AGT2
    pub agt2: Agt2,
    ///AGT3
    pub agt3: Agt3,
    ///AGT4
    pub agt4: Agt4,
    ///AGT5
    pub agt5: Agt5,
    ///TSN
    pub tsn: Tsn,
    ///CRC
    pub crc: Crc,
    ///DOC
    pub doc: Doc,
    ///USBHS
    pub usbhs: Usbhs,
    ///EDMAC0
    pub edmac0: Edmac0,
    ///ETHERC0
    pub etherc0: Etherc0,
    ///SCI0
    pub sci0: Sci0,
    ///SCI1
    pub sci1: Sci1,
    ///SCI2
    pub sci2: Sci2,
    ///SCI3
    pub sci3: Sci3,
    ///SCI4
    pub sci4: Sci4,
    ///SCI5
    pub sci5: Sci5,
    ///SCI6
    pub sci6: Sci6,
    ///SCI7
    pub sci7: Sci7,
    ///SCI8
    pub sci8: Sci8,
    ///SCI9
    pub sci9: Sci9,
    ///SPI0
    pub spi0: Spi0,
    ///SPI1
    pub spi1: Spi1,
    ///ECCAFL0
    pub eccafl0: Eccafl0,
    ///ECCAFL1
    pub eccafl1: Eccafl1,
    ///ECCMB
    pub eccmb: Eccmb,
    ///GPT320
    pub gpt320: Gpt320,
    ///GPT321
    pub gpt321: Gpt321,
    ///GPT322
    pub gpt322: Gpt322,
    ///GPT323
    pub gpt323: Gpt323,
    ///GPT164
    pub gpt164: Gpt164,
    ///GPT165
    pub gpt165: Gpt165,
    ///GPT166
    pub gpt166: Gpt166,
    ///GPT167
    pub gpt167: Gpt167,
    ///GPT168
    pub gpt168: Gpt168,
    ///GPT169
    pub gpt169: Gpt169,
    ///GPT_OPS
    pub gpt_ops: GptOps,
    ///ADC120
    pub adc120: Adc120,
    ///ADC121
    pub adc121: Adc121,
    ///DAC12
    pub dac12: Dac12,
    ///TSD
    pub tsd: Tsd,
    ///FLAD
    pub flad: Flad,
    ///FACI
    pub faci: Faci,
    ///QSPI
    pub qspi: Qspi,
}
impl Peripherals {
    /// Returns all the peripherals *once*.
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    /// Unchecked version of `Peripherals::take`.
    ///
    /// # Safety
    ///
    /// Each of the returned peripherals must be used at most once.
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            rmpu: Rmpu::steal(),
            tzf: Tzf::steal(),
            sram: Sram::steal(),
            bus: Bus::steal(),
            dmac0: Dmac0::steal(),
            dmac1: Dmac1::steal(),
            dmac2: Dmac2::steal(),
            dmac3: Dmac3::steal(),
            dmac4: Dmac4::steal(),
            dmac5: Dmac5::steal(),
            dmac6: Dmac6::steal(),
            dmac7: Dmac7::steal(),
            dma: Dma::steal(),
            dtc: Dtc::steal(),
            icu: Icu::steal(),
            cache: Cache::steal(),
            cpscu: Cpscu::steal(),
            dbg: Dbg::steal(),
            fcache: Fcache::steal(),
            sysc: Sysc::steal(),
            port0: Port0::steal(),
            port1: Port1::steal(),
            port2: Port2::steal(),
            port3: Port3::steal(),
            port4: Port4::steal(),
            port5: Port5::steal(),
            port6: Port6::steal(),
            port7: Port7::steal(),
            port8: Port8::steal(),
            port9: Port9::steal(),
            porta: Porta::steal(),
            portb: Portb::steal(),
            pfs: Pfs::steal(),
            elc: Elc::steal(),
            rtc: Rtc::steal(),
            iwdt: Iwdt::steal(),
            wdt: Wdt::steal(),
            cac: Cac::steal(),
            mstp: Mstp::steal(),
            poeg: Poeg::steal(),
            usbfs: Usbfs::steal(),
            sdhi0: Sdhi0::steal(),
            ssie0: Ssie0::steal(),
            iic0: Iic0::steal(),
            iic0wu: Iic0wu::steal(),
            iic1: Iic1::steal(),
            iic2: Iic2::steal(),
            ospi: Ospi::steal(),
            cec: Cec::steal(),
            canfd: Canfd::steal(),
            ctsu: Ctsu::steal(),
            pscu: Pscu::steal(),
            agt0: Agt0::steal(),
            agt1: Agt1::steal(),
            agt2: Agt2::steal(),
            agt3: Agt3::steal(),
            agt4: Agt4::steal(),
            agt5: Agt5::steal(),
            tsn: Tsn::steal(),
            crc: Crc::steal(),
            doc: Doc::steal(),
            usbhs: Usbhs::steal(),
            edmac0: Edmac0::steal(),
            etherc0: Etherc0::steal(),
            sci0: Sci0::steal(),
            sci1: Sci1::steal(),
            sci2: Sci2::steal(),
            sci3: Sci3::steal(),
            sci4: Sci4::steal(),
            sci5: Sci5::steal(),
            sci6: Sci6::steal(),
            sci7: Sci7::steal(),
            sci8: Sci8::steal(),
            sci9: Sci9::steal(),
            spi0: Spi0::steal(),
            spi1: Spi1::steal(),
            eccafl0: Eccafl0::steal(),
            eccafl1: Eccafl1::steal(),
            eccmb: Eccmb::steal(),
            gpt320: Gpt320::steal(),
            gpt321: Gpt321::steal(),
            gpt322: Gpt322::steal(),
            gpt323: Gpt323::steal(),
            gpt164: Gpt164::steal(),
            gpt165: Gpt165::steal(),
            gpt166: Gpt166::steal(),
            gpt167: Gpt167::steal(),
            gpt168: Gpt168::steal(),
            gpt169: Gpt169::steal(),
            gpt_ops: GptOps::steal(),
            adc120: Adc120::steal(),
            adc121: Adc121::steal(),
            dac12: Dac12::steal(),
            tsd: Tsd::steal(),
            flad: Flad::steal(),
            faci: Faci::steal(),
            qspi: Qspi::steal(),
        }
    }
}
